#!/bin/sh
set -e

usage() {
	echo "Usage: $(basename $0) [-i <identity>] <local> [<user>@]<server>:<remote>" >&2
	[ -n "$1" ] && {
		echo "  <local>       local pathname to sync" >&2
		echo "  <user>        user that will connect to <remote>" >&2
		echo "  <server>      remote server" >&2
		echo "  <remote>      pathname to push to on <remote>" >&2
		echo "  -i <identity> non-standard identity (private key)" >&2
		echo "  -h|--help show this help message" >&2
		exit 0
	} || exit 1
}

[ "$1" = "--help" ] && usage help
while getopts i:h NAME
do
	case "$NAME" in
		i) IDENTITY="$OPTARG";;
		h) usage help;;
		*) usage;;
	esac
done
shift $(($OPTIND - 1))

# Resort to Ruby because `readlink`(1) doesn't have `-f` on OS X.
if [ "$(uname -s)" = "Darwin" ]
then
	LOCAL=$(ruby -e "puts File.expand_path('$1')")
else
	LOCAL=$(readlink -f "$1")
fi
[ "$2" != "${2%%@*}" ] && USER="${2%%@*}"
SERVER="${2##*@}"; SERVER="${SERVER%%:*}"
REMOTE="${2##*:}"
[ -z "$LOCAL" ] && usage
[ -z "$USER" ] && usage
[ -z "$SERVER" ] && usage
[ -z "$REMOTE" ] && usage

# Grab an existing SSH agent or start one just for `doubledown`, otherwise
# `doubledown-fsevents`(1) and `doubledown-inotify`(1) will be very needy.
if which ssh-agent >/dev/null
then
	if [ -S "$SSH_AUTH_SOCK" ]
	then
		[ -n "$SSH_AGENT_PID" ] && export SSH_AGENT_PID
		export SSH_AUTH_SOCK
	else
		eval $(ssh-agent -s)
		trap 'eval $(ssh-agent -sk)' 0
	fi

	[ -n "$IDENTITY" ] && ssh-add "$IDENTITY" || ssh-add || {
		echo "# [doubledown] no SSH identity found" >&2
		exit 1
	}

else
	echo "# [doubledown] ssh-agent not found in your PATH" >&2
	exit 1
fi

# Perform the baseline sync: once, gently, from remote to local and once
# normally from local to remote.
if which rsync >/dev/null
then
	echo "# [doubledown] syncing baseline from remote" >&2
	rsync -azR --ignore-existing "$USER@$SERVER:$REMOTE/./" "$LOCAL"
	echo "# [doubledown] syncing local changes to remote" >&2
	rsync -azR "$LOCAL/./" "$USER@$SERVER:$REMOTE"
else
	echo "# [doubledown] rsync not found in your PATH" >&2
	exit 1
fi

# That's it.  From here on `doubledown-fsevents`(1) or
# `doubledown-inotify`(1) will watch the local directory for changes.
if [ "$(uname -s)" = "Darwin" ]
then
	exec doubledown-fsevents "$@"
elif [ "$(uname -s)" = "Linux" ]
then
	exec doubledown-inotify "$@"
else
	echo "# [doubledown] unsupported operating system" >&2
	exit 1
fi
